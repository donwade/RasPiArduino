
#!/bin/bash
ARDUINO_VER=1.8.19
ARDUINO_BASE=$HOME/arduino-$ARDUINO_VER
    
    #--------------------------------------------------------------

function REPORT_ERROR
{
  set +xeE
  printf "$(tput bold)$(tput setaf 1)" 1>&2
  printf "STOPPED: %s\n"  " ${BASH_SOURCE[0]}:${BASH_LINENO[0]} in ${FUNCNAME[-1]}"
  #printf "STOPPED: %s\n"  " $(realpath $0):${BASH_LINENO[0]}"
  printf "$(tput setaf 0)$(tput sgr 0)\n" 1>&2
  echo $(realpath $0)
  # enable below to get call stack with filename: lineno: funcnames
  #typeset -p = show variable to stdout without using echo
  
  typeset -p BASH_SOURCE; typeset -p BASH_LINENO; typeset -p FUNCNAME
  exit
}


#--------------------------------------------------------------
reset
WORK=$(mktemp -d)
cd $WORK
echo $PWD
[ -d $WORK ] || exit   # directory failed to create


NAME=`uname -m`

if [ "$NAME" == "x86_64" ]; then

    echo "installing into $ARDUINO_BASE"
    
    ask "are you sure you want to blow away your arduino install"
    if [ $? == 0 ]; then
        RED "exit early"
        rm -rf $WORK
        exit
    fi
    
    trap REPORT_ERROR ERR 
    set -eE  # same as: `set -o errexit -o errtrace`                                     
    
    
    # dont loose last run.
    cp /home/dwade/tools-dev/RasPiArduino/tools/setupPi+x86 ~
    
    # install currently exists ... detach all softlinks nicely
    if [ -d $ARDUINO_BASE ]; then
        find -L $ARDUINO_BASE -type l -exec rm -f {} \;
        rm -rf $ARDUINO_BASE
    fi
    
    GREEN "getting arduino-$ARDUINO_VER"
    wget -q https://github.com/arduino/Arduino/releases/download/$ARDUINO_VER/arduino-$ARDUINO_VER.tar.xz
    
    GREEN "untarring ...."
    tar -C $HOME -xf arduino-$ARDUINO_VER.tar.xz
    rm arduino-$ARDUINO_VER.tar.xz
    
    
    GREEN "verify arduino install"
    touch $HOME/arduino-$ARDUINO_VER
    ls $HOME/arduino-$ARDUINO_VER
    echo
    
    
    GREEN "checking for github tools"
    GIT_INSTALL="$HOME/tools-dev/RasPiArduino"
    if [ ! -d "$GIT_INSTALL"  ]; then
        GREEN "getting github RaspiArduino "
        git clone https://github.com/donwade/RasPiArduino.git $GIT_INSTALL
    
    else
        GREEN "RasPiArduino git already in place"
    fi
    
    
    GREEN "getting cross compiler tools"
    ## 64 bit pi cross tool wget -v https://github.com/me-no-dev/RasPiArduino/releases/download/0.0.1/arm-linux-gnueabihf-linux64.tar.gz
    wget -q https://github.com/me-no-dev/RasPiArduino/releases/download/0.0.1/arm-linux-gnueabihf-linux32.tar.gz
    ls
    
    echo 
    
    GREEN "attaching rpi boards into arduino install ..."
    mkdir -p $ARDUINO_BASE/hardware/RaspberryPi
    ln -s $HOME/tools-dev/RasPiArduino/. $ARDUINO_BASE/hardware/RaspberryPi/piduino
    YELLOW "ls $ARDUINO_BASE/hardware/RaspberryPi/piduino"
    ls $ARDUINO_BASE/hardware/RaspberryPi/piduino
    echo
    
    tar -C $ARDUINO_BASE/hardware/RaspberryPi/piduino/tools -xf $WORK/*.gz
    echo

    GREEN "viewing tools directory"
    ls $ARDUINO_BASE/hardware/RaspberryPi/piduino/tools
    echo
    ls $ARDUINO_BASE/hardware/RaspberryPi/piduino/tools/arm*
    

else
   reset
    GREEN "running $0 on raspi for x86 to run remote raspi"
    #sudo apt-get update
    #sudo apt-get -y install telnet git

    # Copy all files from tools/arpi_bins to /usr/local/bin

    GREEN "checking for github tools"
    GIT_INSTALL="$HOME/tools-dev/RasPiArduino"
    if [ ! -d "$GIT_INSTALL"  ]; then
        GREEN "getting github RaspiArduino "
        git clone https://github.com/donwade/RasPiArduino.git $GIT_INSTALL
    else
        GREEN "RasPiArduino git already in place"
    fi
 
    #--------
    cd $GIT_INSTALL
    GREEN "verify git dir"
    ls 

    chmod +x tools/arpi_bins/*
    cp -Rv  tools/arpi_bins/* /usr/local/bin

fi

# ------------------------------------
# exiting 
# whichver is newer ....  update oldest to newest
cp -u $HOME/Scripts/common/setupPi+x86 $GIT_INSTALL/tools || true
cp -u $GIT_INSTALL/tools/setupPi+x86 $HOME/Scripts/common || true

cd    


rm -rf $WORK

set +exE
echo
GREEN "DONE."

exit


    #------------------------------------------------------------------------

[![Join the chat at https://gitter.im/me-no-dev/RasPiArduino](https://badges.gitter.im/me-no-dev/RasPiArduino.svg)](https://gitter.im/me-no-dev/RasPiArduino?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)

### Includes [raspberry_pi_revision from Andrew Duncan](https://github.com/AndrewFromMelbourne/raspberry_pi_revision)

## Arduino Framework for RaspberryPI
### Features
- The familiar Arduino API
- pinMode/digitalRead/digitalWrite/analogWrite
- Full SPI, Wire and Serial compatibility
- Access to STDIN/STDOUT through the Console class
- Access to system tty through the TTY library
- Process, FileIO, Client, Server and UDP implementations through the Bridge library

### Instructions for Arduino IDE
# Open the installation folder of Arduino IDE
# Create a folder named "RaspberryPi" inside "hardware" and clone the repository to a folder named "piduino"
#--------
mkdir hardware/RaspberryPi
cd hardware/RaspberryPi
git clone https://github.com/me-no-dev/RasPiArduino piduino
#--------
# Download , extract and copy the toolchain to piduino/tools/arm-linux-gnueabihf
  - Windows: [gnutoolchains.com](http://gnutoolchains.com/raspberry/)
    * The toolchain for Jessie will work ONLY on RaspberryPi 2
    * The toolchain for Wheezy will work on ALL RaspberryPi boards (recommended)
    * [Video Instructions](https://www.youtube.com/watch?v=lZvhtfUlY8Y)
  - Linux 64: [arm-linux-gnueabihf](https://github.com/me-no-dev/RasPiArduino/releases/download/0.0.1/arm-linux-gnueabihf-linux64.tar.gz)
  - Linux 32: [arm-linux-gnueabihf](https://github.com/me-no-dev/RasPiArduino/releases/download/0.0.1/arm-linux-gnueabihf-linux32.tar.gz)
  - Mac OS X: [arm-linux-gnueabihf](https://github.com/me-no-dev/RasPiArduino/releases/download/0.0.1/arm-linux-gnueabihf-osx.tar.gz)
# Restart Arduino IDE and select the RaspberryPI from the list of boards
# Compile a sketch
# Select the RaspberryPi from the list of Ports (will show the IP address)
# Upload your sketch and see it go


### Instructions for the PI
# Install Raspbian Jessie on your RaspberryPI
# Gain root permissions
#--------
sudo su
#--------

# Enable password login for root
#--------
passwd
#--------
  - _enter the new root password twice_
  - Edit `/etc/ssh/sshd_config` and make sure that the following lines exist and are not commented
#--------
PermitRootLogin yes
PasswordAuthentication yes
#--------

# Disable Serial Console on boot by removing `console=/dev/ttyAMA0` from /boot/cmdline.txt (or through raspi-config)

# Disable Serial tty
#--------
systemctl disable serial-getty@ttyAMA0
#--------

# Disable loading sound kernel module
#--------
sed -i "s/dtparam=audio=on/#dtparam=audio=on/" /boot/config.txt
#--------

# Change the hostname for your Pi (optional) (also through raspi-config)
#--------
hostnamectl set-hostname piduino
#--------

# Setup WiFi (optional)
#--------
cat > /etc/wpa_supplicant/wpa_supplicant.conf <<EOL
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
network={
    ssid="your-ssid"
    psk="your-pass"
}
EOL
#--------

# Setup avahi service to allow updating the sketch from ArduinoIDE
#--------
cat > /etc/avahi/services/arduino.service <<EOL
<?xml version="1.0" standalone='no'?><!--*-nxml-*-->
<!DOCTYPE service-group SYSTEM "avahi-service.dtd">
<service-group>
  <name replace-wildcards="yes">%h</name>
  <service>
    <type>_arduino._tcp</type>
    <port>22</port>
    <txt-record>board=bplus</txt-record>
  </service>
</service-group>
EOL

service avahi-daemon restart
#--------

# Install telnet and git
#--------
apt-get update
apt-get install telnet git
#--------

# Copy all files from tools/arpi_bins to /usr/local/bin
#--------
git clone https://github.com/me-no-dev/RasPiArduino.git piduino
chmod +x piduino/tools/arpi_bins/*
cp piduino/tools/arpi_bins/* /usr/local/bin
rm -rf piduino
#--------

# Create symbolic link for _run-avrdude_
#--------
ln -s /usr/local/bin/run-avrdude /usr/bin/run-avrdude
#--------

# Synchronize time and start sketch on boot (optional)
#--------
apt-get install ntpdate
cat > /etc/rc.local <<EOL
#!/bin/sh -e

_IP=\$(hostname -I) || true
if [ "\$_IP" ]; then
  printf "My IP address is %s\n" "\$_IP"
fi

# Sync Time
ntpdate-debian -u > /dev/null
# Start Sketch
/usr/local/bin/run-sketch > /dev/null

exit 0
EOL
#--------

# Prevent some RealTek USB WiFi from sleep (optional) (EU)
#--------
echo "options 8192cu rtw_power_mgnt=0 rtw_enusbss=1 rtw_ips_mode=1" > /etc/modprobe.d/8192cu.conf
echo "options r8188eu rtw_power_mgnt=0 rtw_enusbss=1 rtw_ips_mode=1" > /etc/modprobe.d/r8188eu.conf
#--------

# Disable screen blank (optional)
#--------
sed -i "s/BLANK_TIME=30/BLANK_TIME=0/" /etc/kbd/config
sed -i "s/POWERDOWN_TIME=30/POWERDOWN_TIME=0/" /etc/kbd/config
#--------

# Do not load I2C UART or SPI kernel drivers

# reboot


### If everything went well
#### Selecting the board from the list of ports
![Select Pi Port](doc/pi_select.png)

#### Password prompt before upload
![Enter Pi Pass](doc/pi_pass.png)

#### Monitoring the sketch
![Sketch Monitor](doc/pi_monitor.png)


### Links to external tutorials
# [VIDEO: Setup Arduino IDE for Windows](https://www.youtube.com/watch?v=lZvhtfUlY8Y)
